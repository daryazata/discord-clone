{"version":3,"sources":["app/features/appSlice.js","components/Chat/ChatHeader.js","app/firebase.js","app/features/userSlice.js","components/Chat/ChatInput.js","components/Chat/Message.js","components/Chat/ChatMessages.js","components/Chat/Main/index.js","components/Sidebar/SidebarChannel.js","components/Sidebar/SidebarVoice.js","components/Sidebar/SidebarProfile.js","components/Sidebar/Main/index.js","components/Login/Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","ChatHeader","className","Notifications","EditLocation","PeopleAltRounded","type","placeholder","SearchRounded","SendRounded","HelpRounded","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","userSlice","user","login","logout","selectUser","ChatInput","useSelector","useState","input","setInput","AddCircle","fontSize","onSubmit","e","preventDefault","collection","doc","add","timestamp","FieldValue","serverTimestamp","message","value","disabled","onChange","target","CardGiftcard","Gif","EmojiEmotions","Message","Avatar","src","photo","displayName","Date","toDate","toLocaleString","toString","ChatMessages","displayMessages","messages","map","key","id","Chat","setMessages","useEffect","unsub","orderBy","onSnapshot","snapshot","docs","data","SidebarChannel","channel","dispatch","useDispatch","selectedChannelClass","onClick","SidebarVoice","SignalCellularAlt","InfoOutlined","Call","SidebarProfile","signOut","Mic","Headset","Settings","Sidebar","channels","setChannels","console","log","display_channels","prompt","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","uid","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad0546d4.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    channelId: null,\n    channelName: null,\n  },\n  reducers: {\n    setChannelInfo: (state, action) => {\n      state.channelId = action.payload.channelId;\n      state.channelName = action.payload.channelName;\n    },\n  },\n});\n\nexport const { setChannelInfo } = appSlice.actions;\n\nexport const selectChannelId = (state) => state.app.channelId; // 1. store 2. slice\nexport const selectChannelName = (state) => state.app.channelName; // 1. store 2. slice\n\nexport default appSlice.reducer;\n","import { EditLocation, HelpRounded, Notifications, PeopleAltRounded, SearchRounded, SendRounded } from '@material-ui/icons'\nimport React from 'react'\nimport './ChatHeader.css'\n\nfunction ChatHeader({channelName}) {\n    return (\n        <div className=\"chatHeader\">\n\n            <div className=\"chatHeader__left\">\n                <h3>\n                    <span className=\"chatHeader__hash\">\n                        #\n                    </span>\n                    {channelName} </h3>\n            </div>\n            <div className=\"chatHeader__right\">\n                <Notifications/>\n                <EditLocation/>\n                <PeopleAltRounded/>\n            </div>\n            <div className=\"chatHeader__right_right\">\n\n            <div className=\"chatHeader__search\">\n                <input type=\"text\" placeholder=\"Search\"/>\n                <SearchRounded/>\n            </div>\n                <SendRounded/>\n                <HelpRounded/>\n    \n            </div>\n        </div>\n    )\n}\n\nexport default ChatHeader\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC9QDU-MvyUBecmmbn6qK4VsJRJ0WaVbi0\",\n    authDomain: \"discord-clone-e2dfe.firebaseapp.com\",\n    databaseURL: \"https://discord-clone-e2dfe.firebaseio.com\",\n    projectId: \"discord-clone-e2dfe\",\n    storageBucket: \"discord-clone-e2dfe.appspot.com\",\n    messagingSenderId: \"1043387033141\",\n    appId: \"1:1043387033141:web:7670f2e379b36887df737c\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig)\n\n  const db = firebaseApp.firestore()\n\n  const auth = firebase.auth()\n\n  const provider = new firebase.auth.GoogleAuthProvider()\n\n  export { auth, provider}\n  export default db","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n \n      state.user = action.payload;\n    },\n    logout:(state)=>{\n      state.user =null\n    }\n\n  },\n});\n\nexport const { login,logout } = userSlice.actions;\n\nexport const selectUser = state => state.user.user; // 1. user slice 2. user peace of state\n\nexport default userSlice.reducer;\n","import {\n  AddCircle,\n  CardGiftcard,\n  EmojiEmotions,\n  Gif,\n} from '@material-ui/icons';\nimport React, { useState } from 'react';\nimport db from '../../app/firebase';\nimport './ChatInput.css';\nimport { useSelector } from 'react-redux';\nimport {\n  selectChannelId,\n  selectChannelName,\n} from '../../app/features/appSlice';\nimport { selectUser } from '../../app/features/userSlice';\nimport firebase from 'firebase';\n\nfunction ChatInput() {\n  const channelId = useSelector(selectChannelId);\n  const channelName = useSelector(selectChannelName);\n  const user = useSelector(selectUser);\n  const [input, setInput] = useState('');\n\n  const handleAddMessage = (e) => {\n    e.preventDefault();\n    if (input) {\n      db.collection('channels').doc(channelId).collection('messages').add({\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        message: input,\n        user: user,\n      });\n\n      setInput('');\n    }\n  };\n\n  return (\n    <div className='chat__input'>\n      <AddCircle fontSize='large' />\n      <form onSubmit={handleAddMessage}>\n        <input\n          value={input}\n          disabled={!channelId}\n          onChange={(e) => setInput(e.target.value)}\n          type='text'\n          placeholder={channelName ? `message #${channelName}` : ''}\n        />\n        <button\n          disabled={!channelId}\n          className='chat__inputButton'\n          type='submit'\n        >\n          Send message\n        </button>\n      </form>\n      <div className='chat__inputIcons'>\n        <CardGiftcard fontSize='large' />\n        <Gif fontSize='large' />\n        <EmojiEmotions fontSize='large' />\n      </div>\n    </div>\n  );\n}\n\nexport default ChatInput;\n","import { Avatar } from '@material-ui/core';\nimport React from 'react';\nimport './Message.css';\n\nfunction Message({ message }) {\n  return (\n    <div className='message'>\n      <Avatar src={message.message.user.photo} />\n      <div className='message__info'>\n        <h4>\n          {message.message.user.displayName}\n          <span className='message__timestamp'>\n            {new Date(message.message.timestamp?.toDate()).toLocaleString(\n              'de-DE'\n            )}\n          </span>\n        </h4>\n        <p>{message.message.message.toString()}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Message;\n","import React from 'react';\nimport './ChatMessages.css';\nimport Message from './Message';\n\nfunction ChatMessages({ messages }) {\n  const displayMessages = messages.map((message) => {\n    return <Message key={message.id} message={message} />;\n  });\n\n  return <div className='chat__messages'>{displayMessages}</div>;\n}\n\nexport default ChatMessages;\n","import React, { useState, useEffect } from 'react';\nimport {\n  selectChannelName,\n  selectChannelId,\n} from '../../../app/features/appSlice';\nimport ChatHeader from '../ChatHeader';\nimport ChatInput from '../ChatInput';\nimport ChatMessages from '../ChatMessages';\nimport './style.css';\nimport { useSelector } from 'react-redux';\nimport db from '../../../app/firebase';\n\nfunction Chat() {\n  const channelId = useSelector(selectChannelId);\n  const channelName = useSelector(selectChannelName);\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    if (channelId) {\n      const unsub = db\n        .collection('channels')\n        .doc(channelId)\n        .collection('messages')\n        .orderBy('timestamp', 'desc')\n        .onSnapshot((snapshot) =>\n          setMessages(\n            snapshot.docs.map((doc) => ({\n              id: doc.id,\n              message: doc.data(),\n            }))\n          )\n        );\n      return () => {\n        unsub();\n      };\n    }\n  }, [channelId]);\n\n  return (\n    <div className='chat'>\n      <div className='chat_scroll'>\n        <ChatHeader channelName={channelName} />\n        <ChatMessages messages={messages} />\n      </div>\n      <ChatInput />\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setChannelInfo, selectChannelId } from '../../app/features/appSlice';\nimport './SidebarChannel.css';\n\nimport { useSelector } from 'react-redux';\n\nfunction SidebarChannel({ channel }) {\n  const dispatch = useDispatch();\n  const channelId = useSelector(selectChannelId);\n  const selectedChannelClass =\n    channel.id === channelId ? 'sidebarChannel_selected' : 'sidebarChannel';\n\n  return (\n    <div\n      className={selectedChannelClass}\n      onClick={() =>\n        dispatch(\n          setChannelInfo({\n            channelId: channel.id,\n            channelName: channel.channel.channelName,\n          })\n        )\n      }\n    >\n      <h4>\n        <span className='sidebarChannel__hash'>#</span>\n        {channel.channel.channelName}\n      </h4>\n    </div>\n  );\n}\n\nexport default SidebarChannel;\n","import React from 'react'\nimport './SidebarVoice.css'\n\nimport {Call, SignalCellularAlt, InfoOutlined} from '@material-ui/icons';\nfunction SidebarVoice() {\n    return (\n        <div className=\"sidebar__voice\" >\n            <SignalCellularAlt\n            className=\"sidebar__voiceIcon\"\n            fontSize='large'\n            />\n            <div className=\"sidebar__voiceInfo\">\n                <h3>Voice Connected</h3>\n                <p>Stream</p>\n            </div>\n            <div className=\"sidebar__voiceIcons\">\n                <InfoOutlined/>\n                <Call/>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default SidebarVoice\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Avatar } from '@material-ui/core';\nimport { Mic, Headset, Settings } from '@material-ui/icons';\nimport { selectUser } from '../../app/features/userSlice';\n\nimport './SidebarVoice.css';\nimport { auth } from '../../app/firebase';\n\nfunction SidebarProfile() {\n  const user = useSelector(selectUser);\n\n  return (\n    <div className='sidebar__profile'>\n      <Avatar\n        className='sidebar__profile__avatar'\n        onClick={() => auth.signOut()}\n        src={user.photo}\n      />\n      <div className='sidebar__profileInfo'>\n        <h3>{user.displayName}</h3>\n        {/* <p>#{user.uid.substring(0, 5)} </p> */}\n      </div>\n      <div className='sidebar__profileIcons'>\n        <Mic />\n        <Headset />\n        <Settings />\n      </div>\n    </div>\n  );\n}\n\nexport default SidebarProfile;\n","//rfce\nimport React, { useEffect, useState } from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport './style.css';\nimport SidebarChannel from '../SidebarChannel';\nimport SidebarVoice from '../SidebarVoice';\nimport SidebarProfile from '../SidebarProfile';\nimport db from '../../../app/firebase';\n\nfunction Sidebar() {\n  const [channels, setChannels] = useState([]);\n\n  useEffect(() => {\n    const unsub = db.collection('channels').onSnapshot((snapshot) =>\n      setChannels(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          channel: doc.data(),\n        }))\n      )\n    );\n\n    return () => {\n      unsub();\n    };\n  }, []);\n\n  const handleAddChannel = () => {\n    const channelName = prompt('Enter a new channel name');\n    if (channelName) {\n      db.collection('channels').add({\n        channelName,\n      });\n    }\n  };\n\n  console.log('channels: ', channels);\n  const display_channels = channels.map((channel) => {\n    // console.log('channels: ', channel);\n    return <SidebarChannel key={channel.id} channel={channel} />;\n  });\n  return (\n    <div className='sidebar'>\n      <div className='sidebar__top'>\n        <h3>Clever Programmer</h3>\n        <ExpandMoreIcon />\n      </div>\n      <div className='sidebar__channels'>\n        <div className='sidebar__channelsHeader'>\n          <div className='sidebar__header'>\n            <ExpandMoreIcon />\n            <h4>Text Channels</h4>\n          </div>\n          <AddIcon onClick={handleAddChannel} className='sidebar__addChannel' />\n        </div>\n\n        <div className='sidebar__channelsList'>{display_channels}</div>\n      </div>\n      <SidebarVoice />\n      <SidebarProfile />\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import { Button } from '@material-ui/core';\nimport React from 'react';\nimport './Login.css'\nimport {auth, provider} from '../../app/firebase'\n\nfunction Login() {\n\n\n    const signIn =()=>{\n            //clever login\n     auth.signInWithPopup(provider)\n     .catch(error => alert(error.message))\n    }\n\n    return (\n        <div className=\"login\">\n\n            <div className=\"login__logo\">\n                <img src=\"https://www.podfeet.com/blog/wp-content/uploads/2018/02/discord-logo.png\" alt=\"\"/>\n            </div>\n        <Button  onClick={signIn}>Sign In</Button>\n        </div>\n    )\n}\n\n\nexport default Login\n","import React, { useEffect } from 'react';\nimport Chat from './components/Chat/Main';\nimport Sidebar from './components/Sidebar/Main';\nimport Login from './components/Login/Login';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUser } from './app/features/userSlice';\nimport { auth } from './app/firebase';\nimport { login, logout } from './app/features/userSlice';\n\nfunction App() {\n  const dispatch = useDispatch(); // to pull in the state info\n  const user = useSelector(selectUser);\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      console.log(authUser);\n      if (authUser) {\n        //user is logged in\n        dispatch(\n          login({\n            uid: authUser.uid,\n            photo: authUser.photoURL,\n            email: authUser.email,\n            displayName: authUser.displayName,\n          })\n        );\n      } else {\n        // user is logged out\n        dispatch(logout());\n      }\n    });\n  }, [dispatch]);\n  return (\n    <div className='app'>\n      {user ? (\n        <>\n          <Sidebar />\n          <Chat />\n        </>\n      ) : (\n        <Login />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './features/userSlice';\nimport appReducer from './features/appSlice';\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}